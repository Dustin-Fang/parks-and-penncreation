DB Credentials:
    username: admin
    password: CIS550parks!
    endpoint: parksdb.cqeozckq2wg2.us-east-1.rds.amazonaws.com
    port: 3306

Ari's queries:

-- List of parks containing a given animal species, sorted by abundance
SELECT P.ParkName AS Name, P.ParkId AS ParkId, S.Abundance AS Abundance
FROM Parks P JOIN Species S ON P.ParkId = S.ParkId
WHERE S.ScientificName = "Lynx rufus"
ORDER BY S.Abundance, P.ParkId;

-- Get all species within a park, sorted by abundance
SELECT S.SpeciesId AS SpeciesId, S.Category AS Category, S.SpeciesOrder AS SpeciesOrder, S.Family AS Family, S.ScientificName AS ScientificName, S.RecordStatus AS RecordStatus, S.Occurrence as Occurrence, S.Nativeness AS Nativeness, S.Abundance AS Abundance, S.Seasonality AS Seasonality, S.ConservationStatus AS ConservationStatus
FROM Parks P JOIN Species S ON P.ParkId = S.ParkId
WHERE P.ParkName = "Crater Lake National Park"
ORDER BY S.Abundance;

-- Most common weather events experienced by a species in a given year
WITH SpeciesSubset AS (
    SELECT S.ParkId AS ParkId
    FROM Species S
    WHERE S.ScientificName = 'Lynx rufus'
    ),
     SpeciesLocations AS (
         SELECT SS.ParkId AS ParkId, P.Latitude AS Latitude, P.Longitude AS Longitude
         FROM SpeciesSubset SS JOIN Parks P on SS.ParkId = P.ParkId
         ),
     WeatherEventsSubset AS (
         SELECT FE.WeatherType AS WeatherType, FE.Latitude AS Latitude, FE.Longitude AS Longitude
         FROM filteredEvents FE
     ),
     WeatherTypes AS (
         SELECT WES.WeatherType AS WeatherType
         FROM WeatherEventsSubset WES JOIN SpeciesLocations SL ON
             WES.Latitude <= 5.0 + SL.Latitude AND WES.Latitude >= SL.Latitude - 5.0 AND
             WES.Longitude <= 5.0 + SL.Longitude AND WES.Longitude >= SL.Longitude - 5.0)
SELECT WT.WeatherType AS WeatherType, COUNT(WT.WeatherType) AS Occurances
FROM WeatherTypes WT
GROUP BY WT.WeatherType
ORDER BY COUNT(WT.WeatherType) DESC;

Gian's queries:
# ------------------------Simple Queries -------------------------- #
# Getting a parkâ€™s info by zip code (example zipcode of 4609)
SELECT P.ParkName AS Name, P.ParkCode AS ParkCode, P.Acres as Acres, P.Latitude AS Latitude, P.Longitude as Longitude
FROM Parks P JOIN Zipcode Z ON P.ParkId = Z.ParkId
WHERE Z.Zipcode = 4609;

# Getting a park's info by state (example state of colorado)
SELECT DISTINCT P.ParkName AS Name, P.ParkCode AS ParkCode, P.Acres as Acres, P.Latitude AS Latitude, P.Longitude as Longitude
FROM Parks P, WeatherEvents W
WHERE ABS(W.Latitude - P.Latitude) <= 1.0 AND ABS(W.Longitude - P.Longitude) <= 1.0 AND W.WeatherState = 'CO';

# Getting a park's info by name (example park name of Rocky Mountain National Park
SELECT P.ParkName AS Name, P.ParkCode AS ParkCode, P.Acres as Acres, P.Latitude AS Latitude, P.Longitude as Longitude
FROM Parks P
WHERE P.ParkName = 'Rocky Mountain National Park';

# Get a species' info by a common name (example - fox)
SELECT S.*
FROM Species S, CommonNames CN
WHERE CN.CommonName = 'Fox' AND S.SpeciesID = CN.SpeciesID;

# Get a species' info by a scientific name (Lynx Rufus)
SELECT S.*
FROM Species S
WHERE S.ScientificName = 'Lynx Rufus';

# Get a species' info by zipcode (example zipcode = 4609)
SELECT S.*
FROM Species S, Zipcode Z
WHERE Z.Zipcode = 4609 AND Z.ParkID = S.ParkId;

# Get a species' info by state (example state - Colorado)
WITH spJoined AS (
    SELECT S.*, P.Latitude, P.Longitude
    FROM Species S JOIN Parks P ON S.ParkId = P.ParkId
), wSubset AS (
    SELECT W.Latitude, W.Longitude, W.WeatherState
    FROM filteredEvents W
    WHERE W.WeatherState = 'CO'
)
SELECT SPJ.*, WS.WeatherState
FROM spJoined SPJ JOIN wSubset WS ON SPJ.Latitude <= 1.0 + WS.Latitude AND SPJ.Latitude >= WS.Latitude - 1.0 AND
        SPJ.Longitude <= 1.0 + WS.Longitude AND SPJ.Longitude >= WS.Longitude - 1.0;

# ------------------------Complex Queries -------------------------- #
# Given some latitude & longitude ranges (an area) that
# collects a set of parks, find the type of weather event that
# prevails the most across some time range (season)
# Example Latitude & Longitude Range: Southern US <= 40 latitude and between -120 -70 longtitude
# Example time range / season: Summer (June - August)
# Time for query ~1 min ---> 3 seconds
SELECT W.WeatherType, SUM(W.Duration) as TotalTime
FROM filteredEvents W
WHERE W.Latitude <= 40.0 AND W.Longitude <= -70.0 AND W.Longitude >= -120.0 AND
      (EXTRACT(MONTH FROM W.StartTime) BETWEEN 6 AND 8) AND (EXTRACT(MONTH FROM W.EndTime) BETWEEN 6 AND 8)
GROUP BY W.WeatherType
ORDER BY TotalTime DESC
LIMIT 5;

# Similarly, given some area range, time range, and species category, find & order the total time / sum(duration)
# they experienced each type of weather event
# Example Latitude & Longitude Range: Southern US <= 40 latitude and between -120 -70 longtitude
# Example time range: Summer (June - August)
# Example category --> Bird
# Query time --> 40+ mins to 2 mins & 17 seconds
WITH speciesSubset AS (
    SELECT S.Category, S.ParkId
    FROM Species S
    WHERE S.Category = 'Bird'
), parkSubset AS (
    SELECT P.ParkID, P.Latitude, P.Longitude
    FROM Parks P
), joinedParkSpecies AS (
    SELECT SS.Category, PS.Latitude, PS.Longitude
    FROM speciesSubset SS JOIN parkSubset PS ON PS.ParkID = SS.ParkID
), joinedAllSubset AS (
    SELECT JPS.Category, WS.WeatherType, WS.Duration
    FROM joinedParkSpecies JPS JOIN filteredEvents WS ON
        # insert area range here
        WS.Latitude <= 40.0 AND WS.Longitude <= -70.0 AND WS.Longitude >= -120.0 AND
        JPS.Latitude <= 1.0 + WS.Latitude AND JPS.Latitude >= WS.Latitude - 1.0 AND
        JPS.Longitude <= 1.0 + WS.Longitude AND JPS.Longitude >= WS.Longitude - 1.0 AND
        #insert time range here
        (EXTRACT(MONTH FROM WS.StartTime) BETWEEN 6 AND 8) AND (EXTRACT(MONTH FROM WS.EndTime) BETWEEN 6 AND 8)
)
SELECT JAS.Category, JAS.WeatherType, SUM(JAS.Duration) as TotalTime
FROM joinedAllSubset as JAS
GROUP BY JAS.Category, JAS.WeatherType
ORDER BY TotalTime DESC;



Dustin's queries:
-- Animal of the day --
SELECT *
FROM Species
ORDER BY RAND()
LIMIT 1;

-- Species in the park that experiences the highest percentage of a given weather event type --
-- Ex: WeatherType = 'Cold' --

WITH Highest_Occurence_Park AS (
    WITH TypeEachPark As (
    SELECT ParkId, COUNT(EventId) as NumOfEventsByPark
    FROM (SELECT EventId, Latitude, Longitude, WeatherType from WeatherEvents) as w
        JOIN (SELECT Latitude, Longitude, ParkId FROM Parks) as p on
        ABS(w.Latitude - p.Latitude) <= 5.0 AND ABS(w.Longitude - p.Longitude) <= 5.0
    WHERE WeatherType = 'Cold'
    GROUP BY ParkId
    )
        SELECT T.ParkId, (T.NumOfEventsByPark / (SELECT SUM(NumOfEventsByPark) FROM TypeEachPark)) as WeatherPercentage
        FROM TypeEachPark as T
        ORDER BY WeatherPercentage DESC
        LIMIT 1
    )
SELECT S.SpeciesId, CommonName
FROM (SELECT SpeciesId, ParkId FROM Species) S JOIN (SELECT ParkId FROM Highest_Occurence_Park) P2 on P2.ParkId = S.ParkId
    JOIN CommonNames CN on S.SpeciesId = CN.SpeciesId;

Shanna's queries:
# Fun fact: This park has the largest number of different species 
# Count the distinct species in each park, order the parks by count,
# and return the name of the first park 

WITH mostPop AS (
  SELECT ParkId, SpeciesId, ScientificName, COUNT(DISTINCT SpeciesId) as ct
  FROM Species
  GROUP BY ParkId
  ORDER BY ct DESC
  LIMIT 1)
Select ParkName
FROM Parks
WHERE ParkId IN (SELECT ParkId from mostPop);

# For the park with the highest number of endangered and threatened species, 
# what percentage of the animals are native to that area? 
# what percentage is not common/abundant in the park?

With mostEndangered AS (
    SELECT SpeciesId, Nativeness, ConservationStatus, Abundance, S.ParkId, COUNT(SpeciesId) as tot, P.ParkName
    FROM Parks P JOIN Species S ON P.ParkId = S.ParkId
    GROUP BY ParkId
    HAVING ConservationStatus IN ('Endangered', 'Threatened', 'Species of Concern')
    ORDER BY tot DESC
    LIMIT 1
)
SELECT ParkId, Abundance, (SELECT COUNT(SpeciesId) WHERE Nativeness='Native') / COUNT(SpeciesId) AS NotNative,
        (SELECT COUNT(SpeciesId) WHERE Abundance IN ('Uncommon', 'Rare', 'Occasional')) / COUNT(SpeciesId) as Common
FROM Species
GROUP BY ParkId
HAVING ParkId IN (Select ParkId from mostEndangered);

# In a given state, which park has the highest number of endangered/threatened species
With StateParks AS (
    SELECT DISTINCT ParkId, ParkName
    FROM Parks P, WeatherEvents W
    WHERE ABS(W.Latitude - P.Latitude) <= 1.0 AND ABS(W.Longitude - P.Longitude) <= 1.0 AND W.WeatherState = 'CA'
)
SELECT ParkName, ConservationStatus,
       (SELECT COUNT(SpeciesId)
       WHERE ConservationStatus IN ('Endangered', 'Threatened', 'Species of Concern')) as Status
FROM Species s JOIN StateParks p on s.ParkId=p.ParkId
GROUP BY ParkName
HAVING ConservationStatus IS NOT NULL
ORDER BY Status DESC
LIMIT 1;



